apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "spinnaker.fullname" . }}-halyard-init-script
  labels:
{{ include "spinnaker.standard-labels" . | indent 4 }}
data:
  init.sh: |
    #!/bin/bash
    {{- if .Values.halyard.gitops.enabled }}
    {{- if and (.Values.halyard.gitops.enabled) (eq .Values.halyard.gitops.repo.type "git") }}
    rm -rf /tmp/spinnaker/.hal
    secret=$(kubectl get secret opsmx-gitops-auth -n {{ .Release.Namespace }} | awk '{print $1}' | tail -n +2)
    if [[ "$secret" == "opsmx-gitops-auth" ]]; then
      echo "INFO: $secret is present"
      GIT_USER=`echo $GIT_USER | sed 's/ *$//g'`
      GIT_TOKEN=`echo $GIT_TOKEN | sed 's/ *$//g'`
      git -c {{ .Values.halyard.gitops.repo.configArgs }} clone $GIT_CLONE_PARAM -b {{ .Values.halyard.gitops.repo.halConfigBranch }} /tmp/spinnaker/test 2>/tmp/tmp.log
      if [[ $? != 0 ]]; then
         echo "ERROR: Failed while trying to execute:"
         echo "git -c http.sslVerify=false clone $GIT_CLONE_PARAM -b {{ .Values.halyard.gitops.repo.halConfigBranch }} /tmp/spinnaker/test" | sed s/$GIT_TOKEN/\<TOKEN_REDACTED\>/g
         sed s/$GIT_TOKEN/\<TOKEN_REDACTED\>/g /tmp/tmp.log
         echo "####"
         echo "Correct baseUrlHostName, organization, username, token and repository in values.yaml and re-execute 'helm upgrade --install ....' command"
         echo "   It is possible that you need to use repoType as stash instead of git. Please check the documentation."
         echo "To expedite the restart, wait for 60 seconds and delete the spinnaker-halyard-0 pod from another window"
         exit 4
      fi
    else
      echo "$secret not found"
      echo "Please create a secret"
      exit 4
    fi
    cp -r /tmp/spinnaker/test// /tmp/spinnaker/.hal
    rm -rf /tmp/spinnaker/test
    printf 'server.address: 0.0.0.0\n' > /tmp/config/halyard-local.yml
    if [ -f /tmp/spinnaker/.hal/halyard.yaml ]; then
    cp /tmp/spinnaker/.hal/halyard.yaml /tmp/config
    fi
    sed -i s/SPINNAKER_NAMESPACE/${SPINNAKER_NAMESPACE}/ /tmp/spinnaker/.hal/config
    echo "Halyard is configured with Gitrepo"

    {{- else }}
    # Override Halyard daemon's listen address
    cp /opt/halyard/config/* /tmp/config
    printf 'server.address: 0.0.0.0\n' > /tmp/config/halyard-local.yml

    # Use Redis deployed via the dependent Helm chart
    rm -rf /tmp/spinnaker/.hal/default/service-settings
    mkdir -p /tmp/spinnaker/.hal/default/service-settings
    cp /tmp/service-settings/* /tmp/spinnaker/.hal/default/service-settings/

    rm -rf /tmp/spinnaker/.hal/default/profiles
    mkdir -p /tmp/spinnaker/.hal/default/profiles
    cp /tmp/additionalProfileConfigMaps/* /tmp/spinnaker/.hal/default/profiles/

    rm -rf /tmp/spinnaker/.hal/.boms

    {{- if .Values.halyard.bom }}
    mkdir -p /tmp/spinnaker/.hal/.boms/bom
    cp /tmp/halyard-bom/* /tmp/spinnaker/.hal/.boms/bom
    {{- end }}

    {{- if .Values.halyard.serviceConfigs }}
    for filename in /tmp/service-configs/*; do
      basename=$(basename -- "$filename")
      fname="${basename#*_}"
      servicename="${basename%%_*}"

      mkdir -p "/tmp/spinnaker/.hal/.boms/$servicename"
      cp "$filename" "/tmp/spinnaker/.hal/.boms/$servicename/$fname"
    done
    {{- end }}

    {{- if hasKey .Values.halyard "additionalInitScript" }}
    # additionalInitScript
    {{ tpl .Values.halyard.additionalInitScript $ | indent 4 }}
    {{- end }}
    {{- end }}
    {{- else }}
    # Override Halyard daemon's listen address
    cp /opt/halyard/config/* /tmp/config
    printf 'server.address: 0.0.0.0\n' > /tmp/config/halyard-local.yml

    # Use Redis deployed via the dependent Helm chart
    rm -rf /tmp/spinnaker/.hal/default/service-settings
    mkdir -p /tmp/spinnaker/.hal/default/service-settings
    cp /tmp/service-settings/* /tmp/spinnaker/.hal/default/service-settings/

    rm -rf /tmp/spinnaker/.hal/default/profiles
    mkdir -p /tmp/spinnaker/.hal/default/profiles
    cp /tmp/additionalProfileConfigMaps/* /tmp/spinnaker/.hal/default/profiles/

    rm -rf /tmp/spinnaker/.hal/.boms

    {{- if .Values.halyard.bom }}
    mkdir -p /tmp/spinnaker/.hal/.boms/bom
    cp /tmp/halyard-bom/* /tmp/spinnaker/.hal/.boms/bom
    {{- end }}

    {{- if .Values.halyard.serviceConfigs }}
    for filename in /tmp/service-configs/*; do
      basename=$(basename -- "$filename")
      fname="${basename#*_}"
      servicename="${basename%%_*}"

      mkdir -p "/tmp/spinnaker/.hal/.boms/$servicename"
      cp "$filename" "/tmp/spinnaker/.hal/.boms/$servicename/$fname"
    done
    {{- end }}

    {{- if hasKey .Values.halyard "additionalInitScript" }}
    # additionalInitScript
    {{ tpl .Values.halyard.additionalInitScript $ | indent 4 }}
    {{- end }}
    
    {{- end }}  



   {{- if and (.Values.halyard.gitops.enabled) (eq .Values.halyard.gitops.repo.type "s3") }}
    #!/bin/bash -x
    rm -rf /tmp/spinnaker/.hal
    AWS_ACCESS_KEY_ID=$S3_ACCESSKEY AWS_SECRET_ACCESS_KEY=$S3_SECRETKEY aws s3 cp s3://$S3_BUCKET/config /tmp/spinnaker/.hal/config
    AWS_ACCESS_KEY_ID=$S3_ACCESSKEY AWS_SECRET_ACCESS_KEY=$S3_SECRETKEY aws s3 cp s3://$S3_BUCKET/default/ /tmp/spinnaker/.hal/default --recursive
    AWS_ACCESS_KEY_ID=$S3_ACCESSKEY AWS_SECRET_ACCESS_KEY=$S3_SECRETKEY aws s3 cp s3://$S3_BUCKET/halyard.yaml /tmp/spinnaker/.hal/halyard.yaml
    sed -i  s/SPINNAKER_NAMESPACE/${SPINNAKER_NAMESPACE}/ /tmp/spinnaker/.hal/config
    sed -i  s/RELEASE_NAME/{{ .Release.Name }}/g /tmp/spinnaker/.hal/config
    sed -i  s/RELEASE_NAME/{{ .Release.Name }}/g /tmp/spinnaker/.hal/default/service-settings/redis.yml
    if [ -f /tmp/spinnaker/.hal/default/profiles/fiat-local.yml ]; then
    sed -i  s/RELEASE_NAME/{{ .Release.Name }}/g /tmp/spinnaker/.hal/default/profiles/fiat-local.yml
    fi
    sed -i  s/SPINNAKER_NAMESPACE/${SPINNAKER_NAMESPACE}/ /tmp/spinnaker/.hal/default/profiles/orca-local.yml
    # Copy S3 Specific files
    cp /tmp/spinnaker/.hal/default/service-settings/clouddriver-caching.yml.s3 /tmp/spinnaker/.hal/default/service-settings/clouddriver-caching.yml
    cp /tmp/spinnaker/.hal/default/service-settings/clouddriver-ro.yml.s3 /tmp/spinnaker/.hal/default/service-settings/clouddriver-ro.yml
    cp /tmp/spinnaker/.hal/default/service-settings/clouddriver-rw.yml.s3 /tmp/spinnaker/.hal/default/service-settings/clouddriver-rw.yml
    cp /tmp/spinnaker/.hal/default/service-settings/clouddriver-ro-deck.yml.s3 /tmp/spinnaker/.hal/default/service-settings/clouddriver-ro-deck.yml
    cp /tmp/spinnaker/.hal/default/profiles/spinnakerconfig.yml.s3 /tmp/spinnaker/.hal/default/profiles/spinnakerconfig.yml
    # Edit and put secrets in there
    sed -i  s/AWS_ACCESS_KEY_ID/${S3_ACCESSKEY}/g /tmp/spinnaker/.hal/default/service-settings/clouddriver-caching.yml
    sed -i  s/AWS_ACCESS_KEY_ID/${S3_ACCESSKEY}/g /tmp/spinnaker/.hal/default/service-settings/clouddriver-ro.yml
    sed -i  s/AWS_ACCESS_KEY_ID/${S3_ACCESSKEY}/g /tmp/spinnaker/.hal/default/service-settings/clouddriver-ro-deck.yml
    sed -i  s/AWS_ACCESS_KEY_ID/${S3_ACCESSKEY}/g /tmp/spinnaker/.hal/default/service-settings/clouddriver-rw.yml
    sed -i  s%AWS_SECRET_ACCESS_KEY%${S3_SECRETKEY}%g /tmp/spinnaker/.hal/default/service-settings/clouddriver-caching.yml
    sed -i  s%AWS_SECRET_ACCESS_KEY%${S3_SECRETKEY}%g /tmp/spinnaker/.hal/default/service-settings/clouddriver-ro.yml
    sed -i  s%AWS_SECRET_ACCESS_KEY%${S3_SECRETKEY}%g /tmp/spinnaker/.hal/default/service-settings/clouddriver-ro-deck.yml
    sed -i  s%AWS_SECRET_ACCESS_KEY%${S3_SECRETKEY}%g /tmp/spinnaker/.hal/default/service-settings/clouddriver-rw.yml
    sed -i  s/AWS_S3_BUCKET/${S3_BUCKET}/g /tmp/spinnaker/.hal/default/profiles/spinnakerconfig.yml
    sed -i  s/AWS_S3_REGION/${S3_REGION}/g /tmp/spinnaker/.hal/default/profiles/spinnakerconfig.yml

    printf 'server.address: 0.0.0.0\n' > /tmp/config/halyard-local.yml
    if [ -f /tmp/spinnaker/.hal/halyard.yaml ]; then
    cp /tmp/spinnaker/.hal/halyard.yaml /tmp/config
    fi
    {{- end }} 
